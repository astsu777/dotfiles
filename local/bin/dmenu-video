#!/usr/bin/env bash
#=========================================================================
# Author: Gaetan (gaetan@ictpourtous.com) - Twitter: @GaetanICT
# Creation: Sun 22 Aug 2021 12:14:28
# Last modified: Sun 03 Oct 2021 04:07:40
# Version: 1.0
#
# Description: manage Internet videos. If taskspooler is installed, queue the links
#=========================================================================

# Prerequisites
if ! type streamlink mpv youtube-dl ffmpeg > /dev/null 2>&1; then notify-send "⚠️ Error" "youtube-dl, streamlink & ffmpeg must be installed" & exit 1; fi

# Determine queue software (optional)
if type ts > /dev/null 2>&1; then
	queue=ts
elif type tsp > /dev/null 2>&1; then
	queue=tsp
else
	queue=''
fi

# Grab the video/playlist link
if pgrep -f mpv >/dev/null 2>&1 && [ -z "$*" ]; then
	choice="$(printf "%s\n" 'Grab Playing Videos' 'Play Video' | dmenu -i -p 'Choose Action:')"
	case "$choice" in
		"Grab Playing Videos") pgrep -f mpv && link="$(ps -x | grep '[0-9]\smpv' | awk '{print $NF}' | dmenu -i -p 'Videos Currently Playing:')" ;;
		"Play Video")
			link="$(if [ -z "$*" ]; then printf "%s" "$*" | dmenu -p 'Video/Playlist/Channel Link:'; else printf "%s" "$*" ;fi)"
			if [ -z "$link" ]; then exit 2; fi
			;;
		*) exit 2 ;;
	esac
else
	link="$(if [ -z "$*" ]; then printf "%s" "$*" | dmenu -p 'Video/Playlist/Channel Link:'; else printf "%s" "$*" ;fi)"
	if [ -z "$link" ]; then exit 2; fi
fi

# Variables
# Add multiple websites separated by a pipe (Ex.: "twitch|youtube|vimeo"
StreamlinkSupported="twitch"

# Actions
yt-listen(){
	if [ -z "$queue" ]; then
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--really-quiet' "$link" audio_only 2> /dev/null & disown ; else mpv --ytdl-format=bestaudio/best --really-quiet "$link" 2> /dev/null & disown ; fi
	else
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then "$queue" streamlink --player mpv --player-args '--really-quiet' "$link" audio_only 2> /dev/null & disown ; else "$queue" mpv --ytdl-format=bestaudio/best --really-quiet "$link" 2> /dev/null & disown ; fi
	fi
}
yt-wsd(){
	if [ -z "$queue" ]; then
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --title="mpv floating"' "$link" 480p 2>/dev/null & disown ; else mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=135+bestaudio/best --really-quiet --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	else
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then "$queue" streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --title="mpv floating"' "$link" 480p 2>/dev/null & disown ; else "$queue" mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=135+bestaudio/best --really-quiet --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	fi
}
yt-wsdnow(){
	if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --title="mpv floating"' "$link" 480p 2>/dev/null & disown ; else mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=135+bestaudio/best --really-quiet --title="mpv floating" "$link" 2>/dev/null & disown ; fi
}
yt-whd(){
	if [ -z "$queue" ]; then
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --title="mpv floating"' "$link" best 2>/dev/null & disown ; else mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --ytdl-format=299+bestaudio/137+bestaudio/best --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	else
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then "$queue" streamlink --player mpv --player-args '--no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --title="mpv floating"' "$link" best 2>/dev/null & disown ; else "$queue" mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --ytdl-format=299+bestaudio/137+bestaudio/best --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	fi
}
yt-whdnow(){
	if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --title="mpv floating"' "$link" best 2>/dev/null & disown ; else mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --ytdl-format=299+bestaudio/137+bestaudio/best --title="mpv floating" "$link" 2>/dev/null & disown ; fi
}
yt-shufsd(){
	if [ -z "$queue" ]; then
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --ytdl --shuffle --title="mpv floating"' "$link" 480p 2>/dev/null & disown ; else mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=135+bestaudio/best --really-quiet --ytdl --shuffle --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	else
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then "$queue" streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --ytdl --shuffle --title="mpv floating"' "$link" 480p 2>/dev/null & disown ; else "$queue" mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=135+bestaudio/best --really-quiet --ytdl --shuffle --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	fi
}
yt-shufhd(){
	if [ -z "$queue" ]; then
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --ytdl --shuffle --title="mpv floating"' "$link" best 2>/dev/null & disown ; else mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=299+bestaudio/137+bestaudio/best --really-quiet --ytdl --shuffle --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	else
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then "$queue" streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --ytdl --shuffle --title="mpv floating"' "$link" best 2>/dev/null & disown ; else "$queue" mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=299+bestaudio/137+bestaudio/best --really-quiet --ytdl --shuffle --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	fi
}
yt-revsd(){
	if [ -z "$queue" ]; then
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-raw-options-append="playlist-reverse=" --really-quiet --title="mpv floating"' "$link" 480p 2>/dev/null & disown ; else mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=135+bestaudio/best --ytdl-raw-options-append="playlist-reverse=" --really-quiet --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	else
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then "$queue" streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-raw-options-append="playlist-reverse=" --really-quiet --title="mpv floating"' "$link" 480p 2>/dev/null & disown ; else "$queue" mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=135+bestaudio/best --ytdl-raw-options-append="playlist-reverse=" --really-quiet --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	fi
}
yt-revhd(){
	if [ -z "$queue" ]; then
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-raw-options-append="playlist-reverse=" --really-quiet --title="mpv floating"' "$link" best 2>/dev/null & disown ; else mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=299+bestaudio/137+bestaudio/best --ytdl-raw-options-append="playlist-reverse=" --really-quiet --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	else
		if grep -Eqw "$StreamlinkSupported" <<< "$link"; then "$queue" streamlink --player mpv --player-args '--ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-raw-options-append="playlist-reverse=" --really-quiet --title="mpv floating"' "$link" best 2>/dev/null & disown ; else "$queue" mpv --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --ytdl-format=299+bestaudio/137+bestaudio/best --ytdl-raw-options-append="playlist-reverse=" --really-quiet --title="mpv floating" "$link" 2>/dev/null & disown ; fi
	fi
}
yt-dlvideo(){
	notify-send " Video queued for download..."
	if [ -z "$queue" ]; then youtube-dl -ci --add-metadata --embed-thumbnail --embed-subs -f 299+bestaudio/137+bestaudio/best "$link" -o "$HOME"/Downloads/'%(uploader)s-%(upload_date)s-%(title)s-%(id)s.%(ext)s' 2> /dev/null & disown ; else "$queue" youtube-dl -ci -f 299+bestaudio/137+bestaudio/best --add-metadata --embed-thumbnail --embed-subs "$link" -o "$HOME"/Downloads/'%(uploader)s-%(upload_date)s-%(title)s-%(id)s.%(ext)s' 2> /dev/null & disown ; fi
}
yt-dlaudio(){
	notify-send " Audio queued for download..."
	if [ -z "$queue" ]; then youtube-dl -ci --add-metadata --extract-audio --audio-format mp3 --audio-quality 0 "$link" -o "$HOME"/Downloads/'%(uploader)s-%(upload_date)s-%(title)s-%(id)s.%(ext)s' 2> /dev/null & disown ; else "$queue" youtube-dl -ci --add-metadata --extract-audio --audio-format mp3 --audio-quality 0 "$link" -o "$HOME"/Downloads/'%(uploader)s-%(upload_date)s-%(title)s-%(id)s.%(ext)s' 2> /dev/null & disown ; fi
}

# Choose preferred video format
if [ -z "$queue" ]; then
	format="$(printf "%s\n" Listen 'Watch SD' 'Watch HD' 'Shuffle SD' 'Shuffle HD' 'Watch Reverse SD' 'Watch Reverse HD' Download 'Download Audio' 'Copy Link' 'Stop Playing' | sort | dmenu -i -p 'Choose Action:')"
	case "$format" in
		Listen) yt-listen ;;
		"Watch SD") yt-wsd ;;
		"Watch HD") yt-whd ;;
		"Shuffle SD") yt-shufsd ;;
		"Shuffle HD") yt-shufhd ;;
		"Watch Reverse SD") yt-revsd ;;
		"Watch Reverse HD") yt-revhd ;;
		Download) yt-dlvideo ;;
		"Download Audio") yt-dlaudio ;;
		"Copy Link") printf "%s" "$link" | tr -d '\n' | xclip -selection clipboard ; notify-send "📋 Link copied to clipboard" ;;
		"Stop Playing") pkill mpv ;;
	esac
else
	format="$(printf "%s\n" Listen 'Watch SD' 'Watch SD (no queue)' 'Watch HD' 'Watch HD (no queue)' 'Shuffle SD' 'Shuffle HD' 'Watch Reverse SD' 'Watch Reverse HD' Download 'Download Audio' 'Copy Link' 'Stop Playing' | sort | dmenu -i -p 'Choose Action:')"
	case "$format" in
		Listen) yt-listen ;;
		"Watch SD") yt-wsd ;;
		"Watch SD (no queue)") yt-wsdnow ;;
		"Watch HD") yt-whd ;;
		"Watch HD (no queue)") yt-whdnow ;;
		"Shuffle SD") yt-shufsd ;;
		"Shuffle HD") yt-shufhd ;;
		"Watch Reverse SD") yt-revsd ;;
		"Watch Reverse HD") yt-revhd ;;
		Download) yt-dlvideo ;;
		"Download Audio") yt-dlaudio ;;
		"Copy Link") printf "%s" "$link" | tr -d '\n' | xclip -selection clipboard ; notify-send "📋 Link copied to clipboard" ;;
		"Stop Playing") pkill mpv ;;
	esac
fi
exit 0
