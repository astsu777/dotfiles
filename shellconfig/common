# Common aliases for all shells
#

# Log symmetric session key during TLS traffic (useful to decrypt SSL traffic)
# Uncomment to enable it
#export SSLKEYLOGFILE=~/sslkeylog.log

# Define custom PATH
if [[ -d "$SCRIPTS" ]]; then
	export PATH="$SCRIPTS":"$SCRIPTS/statusbar":"$PATH"
fi
if [[ -d "$SOURCES/bin" ]]; then
	export PATH="$SOURCES/bin":"$PATH"
fi
if [[ -d "$REPOS/bin" ]]; then
	export PATH="$REPOS/bin":"$PATH"
fi

# macOS specific PATH
if [[ "$OSTYPE" == "darwin"* ]] && type brew > /dev/null 2>&1; then

    # Homebrew PATH
    export PATH=/usr/local/sbin:$PATH

    # Brew Curl
    if [[ -d /usr/local/opt/curl ]]; then
    	export PATH=/usr/local/opt/curl/bin:$PATH
    fi

    # Brew OpenSSL
    if [[ -d /usr/local/opt/openssl/bin/ ]]; then
    	export PATH=/usr/local/opt/openssl/bin/:$PATH
    fi

    # Python
    if [[ -d "$HOME"/Library/Python/3.7/bin ]]; then
    	export PATH=$HOME/Library/Python/3.7/bin:$PATH
    fi
fi

# Remove any duplicates from PATH environment variable
PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"


# Auto-start SSH agent
if [[ "$OSTYPE" == "linux-gnu" ]] && { { [[ ! -z "$SESSION" ]] || [[ ! -z "$GDMSESSION" ]] ;} || { [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]] ;} ;}; then
	if find ~/.ssh/ -type f -regex ".*id_rsa.*" | grep 'id_rsa' >/dev/null 2>&1 && [[ -z "$SSH_AUTH_SOCK" ]]; then
  		eval $(ssh-agent)
		export SSH_AUTH_SOCK
		ssh-add -l >/dev/null || ssh-add
	fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
	if [[ -d "$HOME"/.ssh ]]; then
		if find ~/.ssh/ -type f -regex ".*id_rsa.*" | grep 'id_rsa' >/dev/null 2>&1 && [[ -z "$SSH_AUTH_SOCK" ]]; then
  			find ~/.ssh/ -type f -regex ".*id_rsa.*" | xargs ssh-add -K >/dev/null 2>&1
  		fi
	fi
fi
# elif [[ "$OSTYPE" == "darwin"* ]]; then
# 	if [[ -d "$HOME"/.ssh ]]; then
# 		if [[ ! -S ~/.ssh/ssh_auth_sock ]]; then
#   			eval `ssh-agent`
#   			ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
# 		fi
# 		export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
# 		ssh-add -l > /dev/null || ssh-add
# 	fi
# fi

# Define colors when displaying files on BSD
if [[ "$OSTYPE" == "darwin"* ]] || [[ "$OSTYPE" == *"bsd"* ]] || [[ "$OSTYPE" == *"BSD"* ]]; then
	export LSCOLORS='ExGxFxdaCxDaDahbadacec'
fi

# Define colors when displaying files on Linux
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:'
fi

# Allow files overwriting with >
set +o noclobber

# Colorize man pages
export LESS_TERMCAP_mb=$'\033[1;32m'
export LESS_TERMCAP_md=$'\033[1;32m'
export LESS_TERMCAP_me=$'\033[0m'
export LESS_TERMCAP_se=$'\033[0m'
export LESS_TERMCAP_so=$'\033[01;33m'
export LESS_TERMCAP_ue=$'\033[0m'
export LESS_TERMCAP_us=$'\033[1;4;31m'

# History configuration
HISTSIZE=1000000
SAVEHIST=1000000

# Disable 'less' history file
export LESSHISTFILE="-"

#---------------
# XDG Base Directory
#---------------

# Set the location where user-specific configurations should be written
export XDG_CONFIG_HOME="$HOME"/.config

# Set the location where user-specific non-essential data (cached) should be written
export XDG_CACHE_HOME="$HOME"/.cache

# Set the location where user-specific data files should be written
export XDG_DATA_HOME="$HOME"/.local/share

# GTK
export GTK_RC_FILES="$XDG_CONFIG_HOME"/gtk-1.0/gtkrc
export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
export QT_STYLE_OVERRIDE="Adwaita-Dark"

# Shell
if [[ "$SHELL" == "/bin/bash" ]] || [[ "$SHELL" == "/bin/zsh" ]]; then
	if [ ! -d "$XDG_CACHE_HOME" ]; then mkdir -pv "$XDG_CACHE_HOME" > /dev/null 2>&1; fi
	HISTFILE="$XDG_CACHE_HOME/shell_history"
fi

# NVIDIA Settings
if type nvidia-settings > /dev/null 2>&1; then
	alias nvidia-settings="nvidia-settings --config="$XDG_CONFIG_HOME"/nvidia/settings"
fi

# MPlayer
if type mplayer > /dev/null 2>&1; then
	export MPLAYER_HOME="$XDG_CONFIG_HOME"/mplayer
fi

# Pass
if type pass > /dev/null 2>&1; then
	export PASSWORD_STORE_DIR="$XDG_DATA_HOME"/password-store
fi

# Weechat
if type weechat > /dev/null 2>&1; then
	export WEECHAT_HOME="$XDG_CONFIG_HOME"/weechat
fi

# Docker
if type docker > /dev/null 2>&1; then
	export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker
fi

# 'wget'
if type wget > /dev/null 2>&1; then
	export WGETRC="$XDG_CONFIG_HOME"/wget/wgetrc
fi

# GNU screen
if type screen > /dev/null 2>&1; then
	export SCREENRC="$XDG_CONFIG_HOME"/screen/screenrc
fi

# TMUX
if type tmux > /dev/null 2>&1; then
	export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
fi

# Ansible
if type ansible > /dev/null 2>&1; then
	export ANSIBLE_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/ansible/ansible.cfg"
fi

# NVIDIA
if type nvidia-settings > /dev/null 2>&1; then
	export CUDA_CACHE_PATH="$XDG_CACHE_HOME"/nv
fi

# TeXLive
if type lualatex >/dev/null 2>&1; then
	export TEXMFHOME="$XDG_DATA_HOME/texmf"
	export TEXMFVAR="$XDG_CACHE_HOME/texlive/texmf-var"
	export TEXMFCONFIG="$XDG_CONFIG_HOME/texlive/texmf-config"
fi

# # GnuPG
# # Disabled as this breaks SystemD calls
# if type gpg > /dev/null 2>&1; then
# 	export GNUPGHOME="$XDG_DATA_HOME"/gnupg
# fi

# Xorg
# Do not move .Xauthority if LightDM is installed or it will break
export ICEAUTHORITY="$XDG_CACHE_HOME"/ICEauthority
if ! type lightdm > /dev/null 2>&1; then
	export XAUTHORITY="$XDG_CACHE_HOME"/Xauthority
fi
#export XINITRC="${XDG_CONFIG_HOME:-$HOME/.config}/X11/xinitrc"

#---------------
# Environment Variables
#---------------

# Clipmenu
if type clipmenu > /dev/null 2>&1; then
	if type rofi > /dev/null 2>&1; then
		export CM_LAUNCHER="rofi"
	fi
	export CM_DIR="$XDG_CACHE_HOME"
	export CM_IGNORE_WINDOW=".*KeePassXC"
	export CM_SELECTIONS="clipboard"
fi

# NNN
if type nnn > /dev/null 2>&1; then
	export NNN_OPTS="adHQU"
	export NNN_BMS="h:$HOME;d:$DOTFILES;s:$SCRIPTS"
fi

# YTFZF
if type ytfzf mpv > /dev/null 2>&1; then
	export YTFZF_PLAYER="devour mpv --cache=yes --ontop --no-border --force-window --autofit=352x240 --geometry=-15-15 --really-quiet --ytdl-format=299+bestaudio/137+bestaudio/best --title='mpvfloating'"
fi

# If NVIM is installed, set it as default editor. Otherwise, fallback to vim or vi
if type nvim > /dev/null 2>&1; then
	export EDITOR="nvim"
	export VISUAL="nvim"
elif type vim > /dev/null 2>&1; then
	export EDITOR="vim"
	export VISUAL="vim"
elif type vi > /dev/null 2>&1; then
	export EDITOR="vi"
	export VISUAL="vi"
fi

# Configure terminal
if [[ -z "$TMUX" ]]; then
	export TERM=xterm-256color
fi

# Configure the default terminal emulator
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type st > /dev/null 2>&1; then
		export TERMINAL="st"
	elif type kitty > /dev/null 2>&1; then
		export TERMINAL="kitty"
	elif type alacritty > /dev/null 2>&1; then
		export TERMINAL="alacritty"
	elif type xterm > /dev/null 2>&1; then
		export TERMINAL="xterm"
	fi
fi

# Configure the default launcher menu
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type rofi > /dev/null 2>&1; then
		export LMENU="rofi -show combi"
	elif type dmenu > /dev/null 2>&1; then
		export LMENU="dmenu_run -i -p 'Launch:'"
	fi
fi

# Configure the default mail program
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type mailspring > /dev/null 2>&1; then
		export MAILER="mailspring"
	fi
fi

# Configure the default SMS program
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type android-messages-desktop > /dev/null 2>&1; then
		export SMSMGR="android-messages-desktop"
	fi
fi

# Configure the default direct messaging program
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type telegram-desktop > /dev/null 2>&1; then
		export CHATTER="telegram-desktop"
	elif type signal-desktop > /dev/null 2>&1; then
		export CHATTER="signal-desktop"
	fi
fi

# Configure the default password manager
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type keepassxc > /dev/null 2>&1; then
		export PASSWORDMGR="keepassxc"
	fi
fi

# Configure the default calculator
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type galculator > /dev/null 2>&1; then
		export CALCULATOR="galculator"
	fi
fi

# Configure the default Reddit client
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type tuir > /dev/null 2>&1; then
		export REDDITCLI="tuir"
	fi
fi

# Configure the default graphical Web browser
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type firefox > /dev/null 2>&1; then
		export BROWSER="firefox"
	elif type brave > /dev/null 2>&1; then
		export BROWSER="brave"
	elif type chromium > /dev/null 2>&1; then
		export BROWSER="chromium"
	fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
	if [[ -d /Applications/Firefox.app ]]; then
		export BROWSER="/Applications/Firefox.app/Contents/MacOS/firefox"
	elif [[ -d /Applications/Brave\ Browser.app ]]; then
		export BROWSER="/Applications/Brave\ Browser.app/Contents/MacOS/Brave\ Browser"
	elif [[ -d /Applications/Safari.app ]]; then
		export BROWSER="/Applications/Safari.app/Contents/MacOS/Safari"
	fi
fi

# Configure the default text Web browser
if type links > /dev/null 2>&1; then
	export BROWSERCLI="links"
elif type w3m > /dev/null 2>&1; then
	export BROWSERCLI="w3m"
elif type lynx > /dev/null 2>&1; then
	export BROWSERCLI="lynx"
fi

# Configure the default music player
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type ncmpcpp > /dev/null 2>&1; then
		export MUSICPLAYER="ncmpcpp"
	elif type mpv > /dev/null 2>&1; then
		export MUSICPLAYER="mpv"
	elif type vlc > /dev/null 2>&1; then
		export MUSICPLAYER="vlc"
	fi
fi

# Configure the default file manager
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type nnn > /dev/null 2>&1; then
		export FILEMANAGER="nnn"
	elif type pcmanfm > /dev/null 2>&1; then
		export FILEMANAGER="pcmanfm"
	fi
fi

# Configure the default system monitoring software
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type gotop > /dev/null 2>&1; then
		export SYSMONITOR="gotop"
	elif type bpytop > /dev/null 2>&1; then
		export SYSMONITOR="bpytop"
	elif type htop > /dev/null 2>&1; then
		export SYSMONITOR="htop"
	fi
fi

# Configure the default IRC client
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type weechat > /dev/null 2>&1; then
		export IRCCLIENT="weechat"
	elif type hexchat > /dev/null 2>&1; then
		export IRCCLIENT="hexchat"
	fi
fi

# Configure the default RSS reader
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type newsboat > /dev/null 2>&1; then
		export RSSREADER="newsboat"
	fi
fi

# Configure the default screenshot utility
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type flameshot > /dev/null 2>&1; then
		export SCROTBIN='flameshot gui'
	elif type maim > /dev/null 2>&1; then
		export SCROTBIN="dmenu-screenshot"
	fi
fi

# Configure the default sound mixer
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type pulsemixer > /dev/null 2>&1; then
		export AUDIOMIXER="pulsemixer"
	elif type alsamixer > /dev/null 2>&1; then
		export AUDIOMIXER="alsamixer"
	fi
fi

# Configure locales
export LC_ALL=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_CTYPE=UTF-8

# Configure keyboard repeat rate
if [[ "$OSTYPE" == "linux-gnu" ]] && type xset > /dev/null 2>&1; then
	xset r rate 200 70 > /dev/null 2>&1
fi

# Automatically start X if on Arch Linux/Void Linux, and a xinitrc file is present
# It also checks if the default TTY is /dev/tty1
if { [[ -f /etc/arch-release ]] || [[ -d /usr/share/xbps.d ]] ;} && [[ -f "$HOME"/.xinitrc ]] && [[ -z "${DISPLAY}" ]] && { [[ "${XDG_VTNR}" -eq 1 ]] || [[ "$(fgconsole)" -eq 1 ]] ;}; then
	exec startx
fi

# Auto-start Tmux session
if [[ ! "$SESSION" =~ ^(dwm|DWM|bspwm|BSPWM|i3)$ ]] && [[ ! "$GDMSESSION" =~ ^(dwm|DWM|bspwm|BSPWM|i3)$ ]]; then
	if type tmux > /dev/null 2>&1 && [[ -z "$TMUX" ]]; then
		if [[ -z "$SSH_CLIENT" ]] || [[ -z "$SSH_TTY" ]]; then
    		if [[ ! -d "$XDG_CONFIG_HOME"/tmux/plugins/tpm ]]; then
				echo -e "Installing TMUX Plugin Manager..."
    			git clone https://github.com/tmux-plugins/tpm "$XDG_CONFIG_HOME"/tmux/plugins/tpm > /dev/null 2>&1
				echo -e "TMUX Plugin Manager installed"
				echo -e
			fi
    		if [[ ! -d "$XDG_CONFIG_HOME"/tmux/plugins/tmux-sensible ]]; then
				echo -e "Installing TMUX plugins..."
    			"$XDG_CONFIG_HOME"/tmux/plugins/tpm/bin/install_plugins > /dev/null 2>&1
				echo -e "TMUX plugins installed"
				echo -e
    		fi
    	fi
		tmux attach-session -t "$USER"0 || tmux new-session -s "$USER"0
	fi
fi

# Check if dotfiles are up-to-date
# DISABLED due to delays when proxy are required or when GitHub is blocked
# if [[ -d "$DOTFILES"/.git ]]; then
# 	git -C "$DOTFILES" fetch > /dev/null 2>&1
# 	alias dotrefresh="git -C $DOTFILES pull"
# 	if git -C "$DOTFILES" status -sb | grep behind > /dev/null 2>&1; then
# 		printf '%s\n' "An update for your dotfiles is available. Please run \"dotrefresh\" to update"
# 	fi
# fi
